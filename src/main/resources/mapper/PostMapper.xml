<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.now.core.post.domain.PostMapper">

    <!-- Post 테이블 게시글 삭제 쿼리 -->
    <delete id="deletePost" parameterType="Long">
        DELETE
        FROM tb_post
        WHERE post_idx = #{postIdx}
    </delete>

    <!-- Inquiry 테이블 삭제 쿼리 -->
    <delete id="deleteInquiry" parameterType="Long">
        DELETE
        FROM tb_inquiry
        WHERE post_idx = #{postIdx}
    </delete>



    <!-- Notice 수정 쿼리-->
    <update id="updateNotice" parameterType="Notice">
        UPDATE tb_post
        SET category = #{category.name},
            title   = #{title},
            mod_date = NOW(),
            content = #{content},
            pinned = #{pinned}
        WHERE post_idx = #{postIdx}
    </update>

    <!-- Community 수정 쿼리-->
    <update id="updateCommunity" parameterType="Community">
        UPDATE tb_post
        SET category = #{category.name},
            title   = #{title},
            mod_date = NOW(),
            content = #{content}
        WHERE post_idx = #{postIdx}
    </update>

    <!-- Photo 수정 쿼리-->
    <update id="updatePhoto" parameterType="Photo">
        UPDATE tb_post
        SET category = #{category.name},
            title   = #{title},
            mod_date = NOW(),
            content = #{content}
        WHERE post_idx = #{postIdx}
    </update>

    <!-- Inquiry Post 수정 쿼리-->
    <update id="updateInquiryPost" parameterType="Inquiry">
        UPDATE tb_post
        SET category = #{category.name},
        title   = #{title},
        mod_date = NOW(),
        content = #{content}
        WHERE post_idx = #{postIdx}
    </update>

    <!-- Inquiry 테이블 수정 쿼리-->
    <update id="updateInquiry" parameterType="Inquiry">
        UPDATE tb_inquiry
        SET secret   = #{secret},
            password = #{password}
        WHERE post_idx = #{postIdx}
    </update>

    <!-- tb_inquiry Answer 수정 쿼리-->
    <update id="updateAnswer" parameterType="Answer">
        UPDATE tb_inquiry
        SET answer_content     = #{answerContent},
            answer_reg_date    = NOW()
        WHERE post_idx = #{postIdx}
    </update>





    <!-- Notice 저장 쿼리 -->
    <insert id="saveNotice" parameterType="Notice" useGeneratedKeys="true" keyProperty="postIdx">
        INSERT INTO tb_post (post_group, category, title, manager_idx, reg_date, mod_date, content, view_count, like_count, dislike_count, pinned)
        VALUES (#{postGroup}, #{category.name}, #{title}, #{managerIdx}, now(), null, #{content}, 0, 0, 0, #{pinned})
    </insert>

    <!-- Community 저장 쿼리 -->
    <insert id="saveCommunity" parameterType="Community" useGeneratedKeys="true" keyProperty="postIdx">
        INSERT INTO tb_post (post_group, category, title, member_idx, reg_date, mod_date, content, view_count, like_count, dislike_count)
        VALUES (#{postGroup}, #{category.name}, #{title}, #{memberIdx}, now(), null, #{content}, 0, 0, 0)
    </insert>

    <!-- Photo 저장 쿼리 -->
    <insert id="savePhoto" parameterType="Photo" useGeneratedKeys="true" keyProperty="postIdx">
        INSERT INTO tb_post (post_group, category, title, member_idx, reg_date, mod_date, content, view_count, like_count, dislike_count)
        VALUES (#{postGroup}, #{category.name}, #{title}, #{memberIdx}, now(), null, #{content}, 0, 0, 0)
    </insert>

    <!-- Inquiry 저장 쿼리 -->
    <insert id="saveInquiry" parameterType="Inquiry" useGeneratedKeys="true" keyProperty="postIdx">
        INSERT INTO tb_post (post_group, category, title, member_idx, reg_date, mod_date, content, view_count, like_count, dislike_count)
        VALUES (#{postGroup}, #{category.name}, #{title}, #{memberIdx}, now(), null, #{content}, 0, 0, 0)
    </insert>

    <!-- Inquiry의 비밀글 설정 저장 쿼리 -->
    <insert id="saveInquirySecretSetting" parameterType="Inquiry" useGeneratedKeys="true" keyProperty="inquiryIdx">
        INSERT INTO tb_inquiry (post_idx, secret, password)
        VALUES (#{postIdx}, #{secret}, #{password})
    </insert>

    <!-- Inquiry에 대한 답변 저장 쿼리 -->
    <update id="saveAnswer" parameterType="Answer">
        UPDATE tb_inquiry
        SET answer_manager_idx = #{answerManagerIdx},
            answer_content     = #{answerContent},
            answer_reg_date    = NOW()
        WHERE post_idx = #{postIdx}
    </update>



    <!-- 모든 게시글 조회 쿼리 -->
    <select id="findAllPosts" parameterType="Condition" resultMap="posts" useCache="false" flushCache="true">
        SELECT * FROM (
        SELECT
        <include refid="selectPostTableColumnWithoutContent"/>,
        <include refid="selectMaxAttachmentTableColumn"/>,
        <include refid="selectMemberTableColumn"/>,
        <include refid="selectMaxInquiriesWithNonSecretInfo"/>,
        <include refid="selectMaxCommentTableColumn"/>,
        <include refid="selectMaxManagerTableColumn"/>,
        <include refid="selectMaxThumbnailTableColumn"/>,
        <include refid="selectMaxMemberAndManagerInfoOfCommentTableColumn"/>,
        <include refid="selectMaxManagerInfoOfInquiryTableColumn"/>
        FROM tb_post p
        LEFT OUTER JOIN tb_attachment f ON p.post_idx = f.post_idx
        LEFT OUTER JOIN tb_comment co ON p.post_idx = co.post_idx
        LEFT OUTER JOIN tb_member m ON p.member_idx = m.member_idx
        LEFT OUTER JOIN tb_manager ma ON p.manager_idx = ma.manager_idx
        LEFT OUTER JOIN tb_thumbnail th ON p.post_idx = th.post_idx
        LEFT OUTER JOIN tb_member com ON co.member_idx = com.member_idx
        LEFT OUTER JOIN tb_manager coma ON co.manager_idx = coma.manager_idx
        LEFT OUTER JOIN tb_inquiry i ON i.post_idx = p.post_idx
        LEFT OUTER JOIN tb_manager ima ON p.manager_idx = ima.manager_idx
        WHERE p.post_group = 'NOTICE'
        GROUP BY p.post_idx
        ORDER BY p.post_idx DESC

        <include refid="maxNumberOfPosts"/>

        ) AS notice_posts

        UNION

        SELECT * FROM (
        SELECT
        <include refid="selectPostTableColumnWithoutContent"/>,
        <include refid="selectMaxAttachmentTableColumn"/>,
        <include refid="selectMemberTableColumn"/>,
        <include refid="selectMaxInquiriesWithNonSecretInfo"/>,
        <include refid="selectMaxCommentTableColumn"/>,
        <include refid="selectMaxManagerTableColumn"/>,
        <include refid="selectMaxThumbnailTableColumn"/>,
        <include refid="selectMaxMemberAndManagerInfoOfCommentTableColumn"/>,
        <include refid="selectMaxManagerInfoOfInquiryTableColumn"/>
        FROM tb_post p
        LEFT OUTER JOIN tb_attachment f ON p.post_idx = f.post_idx
        LEFT OUTER JOIN tb_comment co ON p.post_idx = co.post_idx
        LEFT OUTER JOIN tb_member m ON p.member_idx = m.member_idx
        LEFT OUTER JOIN tb_manager ma ON p.manager_idx = ma.manager_idx
        LEFT OUTER JOIN tb_thumbnail th ON p.post_idx = th.post_idx
        LEFT OUTER JOIN tb_member com ON co.member_idx = com.member_idx
        LEFT OUTER JOIN tb_manager coma ON co.manager_idx = coma.manager_idx
        LEFT OUTER JOIN tb_inquiry i ON i.post_idx = p.post_idx
        LEFT OUTER JOIN tb_manager ima ON ima.manager_idx = i.answer_manager_idx
        WHERE p.post_group = 'COMMUNITY'
        GROUP BY p.post_idx
        ORDER BY p.post_idx DESC

        <include refid="maxNumberOfPosts"/>

        ) AS community_posts

        UNION

        SELECT * FROM (
        SELECT
        <include refid="selectPostTableColumnWithoutContent"/>,
        <include refid="selectMaxAttachmentTableColumn"/>,
        <include refid="selectMemberTableColumn"/>,
        <include refid="selectMaxInquiriesWithNonSecretInfo"/>,
        <include refid="selectMaxCommentTableColumn"/>,
        <include refid="selectMaxManagerTableColumn"/>,
        <include refid="selectMaxThumbnailTableColumn"/>,
        <include refid="selectMaxMemberAndManagerInfoOfCommentTableColumn"/>,
        <include refid="selectMaxManagerInfoOfInquiryTableColumn"/>
        FROM tb_post p
        LEFT OUTER JOIN tb_attachment f ON p.post_idx = f.post_idx
        LEFT OUTER JOIN tb_comment co ON p.post_idx = co.post_idx
        LEFT OUTER JOIN tb_member m ON p.member_idx = m.member_idx
        LEFT OUTER JOIN tb_manager ma ON p.manager_idx = ma.manager_idx
        LEFT OUTER JOIN tb_thumbnail th ON p.post_idx = th.post_idx
        LEFT OUTER JOIN tb_member com ON co.member_idx = com.member_idx
        LEFT OUTER JOIN tb_manager coma ON co.manager_idx = coma.manager_idx
        LEFT OUTER JOIN tb_inquiry i ON i.post_idx = p.post_idx
        LEFT OUTER JOIN tb_manager ima ON ima.manager_idx = i.answer_manager_idx
        WHERE p.post_group = 'PHOTO'
        GROUP BY p.post_idx
        ORDER BY p.post_idx DESC

        <include refid="maxNumberOfPosts"/>

        ) AS photo_posts

        UNION

        SELECT * FROM (
        SELECT
        <include refid="selectPostTableColumnWithoutContent"/>,
        <include refid="selectMaxAttachmentTableColumn"/>,
        <include refid="selectMemberTableColumn"/>,
        <include refid="selectMaxInquiriesWithNonSecretInfo"/>,
        <include refid="selectMaxCommentTableColumn"/>,
        <include refid="selectMaxManagerTableColumn"/>,
        <include refid="selectMaxThumbnailTableColumn"/>,
        <include refid="selectMaxMemberAndManagerInfoOfCommentTableColumn"/>,
        <include refid="selectMaxManagerInfoOfInquiryTableColumn"/>
        FROM tb_post p
        LEFT OUTER JOIN tb_attachment f ON p.post_idx = f.post_idx
        LEFT OUTER JOIN tb_comment co ON p.post_idx = co.post_idx
        LEFT OUTER JOIN tb_member m ON p.member_idx = m.member_idx
        LEFT OUTER JOIN tb_manager ma ON p.manager_idx = ma.manager_idx
        LEFT OUTER JOIN tb_thumbnail th ON p.post_idx = th.post_idx
        LEFT OUTER JOIN tb_member com ON co.member_idx = com.member_idx
        LEFT OUTER JOIN tb_manager coma ON co.manager_idx = coma.manager_idx
        LEFT OUTER JOIN tb_inquiry i ON i.post_idx = p.post_idx
        LEFT OUTER JOIN tb_manager ima ON ima.manager_idx = i.answer_manager_idx
        WHERE p.post_group = 'INQUIRY'
        GROUP BY p.post_idx
        ORDER BY p.post_idx DESC

        <include refid="maxNumberOfPosts"/>

        ) AS inquiry_posts
    </select>


    <!-- Posts resultMap -->
    <resultMap id="posts" type="Posts">
        <discriminator javaType="string" column="p_post_group">
            <case value="NOTICE">
                <association property="notice" resultMap="notice" />
            </case>
            <case value="COMMUNITY">
                <association property="community" resultMap="community" />
            </case>
            <case value="PHOTO">
                <association property="photo" resultMap="photo" />
            </case>
            <case value="INQUIRY">
                <association property="inquiry" resultMap="inquiry" />
            </case>
        </discriminator>
    </resultMap>



    <select id="findTotalPostCount" parameterType="Condition" useCache="false" flushCache="true">
        SELECT
            count(p.post_idx)
        FROM tb_post p
            LEFT OUTER JOIN tb_comment co ON p.post_idx = co.post_idx
            LEFT OUTER JOIN tb_member m ON p.member_idx = m.member_idx
            LEFT OUTER JOIN tb_manager ma ON p.manager_idx = ma.manager_idx
            LEFT OUTER JOIN tb_member com ON co.member_idx = com.member_idx
        <include refid="postGroupWithWhere"/>
        <include refid="conditionWithoutPostGroup"/>
    </select>






    <!-- 모든 공지사항 조회 쿼리 -->
    <select id="findAllNotices" parameterType="Condition" resultMap="notice" useCache="false" flushCache="true">
        SELECT
            <include refid="selectPostTableColumn"/>,
            <include refid="selectManagerTableColumn"/>,
            <include refid="selectMaxCommentTableColumn"/>,
            <include refid="selectMaxMemberAndManagerInfoOfCommentTableColumn"/>
        FROM tb_post p
            LEFT OUTER JOIN tb_member m ON p.member_idx = m.member_idx
            LEFT OUTER JOIN tb_manager ma ON p.manager_idx = ma.manager_idx
            LEFT OUTER JOIN tb_comment co ON p.post_idx = co.post_idx
            LEFT OUTER JOIN tb_member com ON co.member_idx = com.member_idx
            LEFT OUTER JOIN tb_manager coma ON co.manager_idx = coma.manager_idx
        WHERE p.post_group = 'NOTICE'
        <include refid="conditionWithoutPostGroup"/>
        GROUP BY p.post_idx
        <include refid="sort"/>
        <include refid="page"/>
    </select>

    <!-- 모든 커뮤니티 게시글 조회 쿼리 -->
    <select id="findAllCommunity" parameterType="Condition" resultMap="community" useCache="false" flushCache="true">
        SELECT
            <include refid="selectPostTableColumn"/>,
            <include refid="selectMaxAttachmentTableColumn"/>,
            <include refid="selectMaxCommentTableColumn"/>,
            <include refid="selectMemberTableColumn"/>,
            <include refid="selectMaxMemberAndManagerInfoOfCommentTableColumn"/>
        FROM tb_post p
            LEFT OUTER JOIN tb_attachment f ON p.post_idx = f.post_idx
            LEFT OUTER JOIN tb_comment co ON p.post_idx = co.post_idx
            LEFT OUTER JOIN tb_member m ON p.member_idx = m.member_idx
            LEFT OUTER JOIN tb_manager ma ON p.manager_idx = ma.manager_idx

            LEFT OUTER JOIN tb_member com ON co.member_idx = com.member_idx
            LEFT OUTER JOIN tb_manager coma ON co.manager_idx = coma.manager_idx
        WHERE p.post_group = 'COMMUNITY'
        <include refid="conditionWithoutPostGroup"/>
        GROUP BY p.post_idx
        <include refid="sort"/>
        <include refid="page"/>
    </select>

    <!-- 모든 사진 게시글 조회 쿼리 -->
    <select id="findAllPhotos" parameterType="Condition" resultMap="photo" useCache="false" flushCache="true">
        SELECT
            <include refid="selectPostTableColumn"/>,
            <include refid="selectMaxAttachmentTableColumn"/>,
            <include refid="selectMaxCommentTableColumn"/>,
            <include refid="selectMemberTableColumn"/>,
            <include refid="selectMaxThumbnailTableColumn"/>,
            <include refid="selectMaxMemberAndManagerInfoOfCommentTableColumn"/>
        FROM tb_post p
            LEFT OUTER JOIN tb_attachment f ON p.post_idx = f.post_idx
            LEFT OUTER JOIN tb_comment co ON p.post_idx = co.post_idx
            LEFT OUTER JOIN tb_member m ON p.member_idx = m.member_idx
            LEFT OUTER JOIN tb_manager ma ON p.manager_idx = ma.manager_idx
            LEFT OUTER JOIN tb_thumbnail th ON p.post_idx = th.post_idx
            LEFT OUTER JOIN tb_member com ON co.member_idx = com.member_idx
            LEFT OUTER JOIN tb_manager coma ON co.manager_idx = coma.manager_idx
        WHERE p.post_group = 'PHOTO'
        <include refid="conditionWithoutPostGroup"/>
        GROUP BY p.post_idx
        <include refid="sort"/>
        <include refid="page"/>
    </select>

    <!-- 모든 문의 게시글 조회 쿼리, content 제외 -->
    <select id="findAllInquiries" parameterType="Condition" resultMap="inquiry" useCache="false" flushCache="true">
        SELECT
            <include refid="selectPostTableColumnWithoutContent"/>,
            <include refid="selectMemberTableColumn"/>,
            <include refid="selectMaxInquiriesWithNonSecretInfo"/>,
            <include refid="selectMaxCommentTableColumn"/>,
            <include refid="selectMaxManagerTableColumn"/>,
            <include refid="selectMaxMemberAndManagerInfoOfCommentTableColumn"/>,
            <include refid="selectMaxManagerInfoOfInquiryTableColumn"/>
        FROM tb_post p
            LEFT OUTER JOIN tb_member m ON p.member_idx = m.member_idx
            LEFT OUTER JOIN tb_manager ma ON p.manager_idx = ma.manager_idx
            LEFT OUTER JOIN tb_inquiry i ON i.post_idx = p.post_idx
            LEFT OUTER JOIN tb_manager ima ON ima.manager_idx = i.answer_manager_idx
            LEFT OUTER JOIN tb_comment co ON p.post_idx = co.post_idx
            LEFT OUTER JOIN tb_member com ON co.member_idx = com.member_idx
            LEFT OUTER JOIN tb_manager coma ON co.manager_idx = coma.manager_idx
        <include refid="conditionWithoutPostGroup"/>
        GROUP BY p.post_idx
        <include refid="sort"/>
        <include refid="page"/>
    </select>






    <!-- 단일 공지사항 조회 쿼리 -->
    <select id="findNotice" parameterType="Long" resultMap="notice" useCache="false" flushCache="true">
        SELECT
        <include refid="selectPostTableColumn"/>,
        <include refid="selectManagerTableColumn"/>,
        <include refid="selectCommentTableColumn"/>,
        <include refid="selectMemberAndManagerInfoOfCommentTableColumn"/>
        FROM tb_post p
        LEFT OUTER JOIN tb_manager ma ON p.manager_idx = ma.manager_idx
        LEFT OUTER JOIN tb_comment co ON p.post_idx = co.post_idx
        LEFT OUTER JOIN tb_member com ON co.member_idx = com.member_idx
        LEFT OUTER JOIN tb_manager coma ON co.manager_idx = coma.manager_idx
        WHERE p.post_group = 'NOTICE' AND p.post_idx = #{postIdx}
    </select>

    <!-- 단일 커뮤니티 게시글 조회 쿼리 -->
    <select id="findCommunity" parameterType="Long" resultMap="community" useCache="false" flushCache="true">
        SELECT
        <include refid="selectPostTableColumn"/>,
        <include refid="selectAttachmentTableColumn"/>,
        <include refid="selectCommentTableColumn"/>,
        <include refid="selectMemberTableColumn"/>,
        <include refid="selectMemberAndManagerInfoOfCommentTableColumn"/>
        FROM tb_post p
        LEFT OUTER JOIN tb_attachment f ON p.post_idx = f.post_idx
        LEFT OUTER JOIN tb_comment co ON p.post_idx = co.post_idx
        LEFT OUTER JOIN tb_member m ON p.member_idx = m.member_idx
        LEFT OUTER JOIN tb_manager ma ON p.manager_idx = ma.manager_idx
        LEFT OUTER JOIN tb_member com ON co.member_idx = com.member_idx
        LEFT OUTER JOIN tb_manager coma ON co.manager_idx = coma.manager_idx
        WHERE p.post_group = 'COMMUNITY' AND p.post_idx = #{postIdx}
    </select>

    <!-- 단일 사진 게시글 조회 쿼리 -->
    <select id="findPhoto" parameterType="Long" resultMap="photo" useCache="false" flushCache="true">
        SELECT
        <include refid="selectPostTableColumn"/>,
        <include refid="selectAttachmentTableColumn"/>,
        <include refid="selectCommentTableColumn"/>,
        <include refid="selectMemberTableColumn"/>,
        <include refid="selectMemberAndManagerInfoOfCommentTableColumn"/>,
        <include refid="selectThumbnailTableColumn"/>
        FROM tb_post p
        LEFT OUTER JOIN tb_attachment f ON p.post_idx = f.post_idx
        LEFT OUTER JOIN tb_comment co ON p.post_idx = co.post_idx
        LEFT OUTER JOIN tb_member m ON p.member_idx = m.member_idx
        LEFT OUTER JOIN tb_manager ma ON p.manager_idx = ma.manager_idx
        LEFT OUTER JOIN tb_member com ON co.member_idx = com.member_idx
        LEFT OUTER JOIN tb_manager coma ON co.manager_idx = coma.manager_idx
        LEFT OUTER JOIN tb_thumbnail th ON p.post_idx = th.post_idx
        WHERE p.post_group = 'PHOTO' AND p.post_idx = #{postIdx}
    </select>

    <!-- 단일 문의 게시글 조회 쿼리 -->
    <select id="findInquiry" parameterType="Long" resultMap="inquiry" useCache="false" flushCache="true">
        SELECT
        <include refid="selectPostTableColumn"/>,
        <include refid="selectMemberTableColumn"/>,
        <include refid="selectInquiryTableColumn"/>,
        <include refid="selectCommentTableColumn"/>,
        <include refid="selectManagerTableColumn"/>,
        <include refid="selectMemberAndManagerInfoOfCommentTableColumn"/>,
        <include refid="selectManagerInfoOfInquiryTableColumn"/>
        FROM tb_post p
        LEFT OUTER JOIN tb_member m ON p.member_idx = m.member_idx
        LEFT OUTER JOIN tb_manager ma ON p.manager_idx = ma.manager_idx
        LEFT OUTER JOIN tb_inquiry i ON i.post_idx = p.post_idx
        LEFT OUTER JOIN tb_manager ima ON ima.manager_idx = i.answer_manager_idx
        LEFT OUTER JOIN tb_comment co ON p.post_idx = co.post_idx

        LEFT OUTER JOIN tb_member com ON co.member_idx = com.member_idx
        LEFT OUTER JOIN tb_manager coma ON co.manager_idx = coma.manager_idx
        WHERE p.post_group = 'INQUIRY' AND p.post_idx = #{postIdx}
    </select>


    <select id="existPostByPostId" parameterType="Long" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM tb_post
        WHERE post_idx = #{postIdx}
    </select>







    <!-- Post 테이블의 컬럼 매핑 -->
    <sql id="selectPostTableColumn">
        p.post_idx AS p_post_idx,
        p.post_group AS p_post_group,
        p.category AS p_category,
        p.title AS p_title,
        p.member_idx AS p_member_idx,
        p.manager_idx AS p_manager_idx,
        p.reg_date AS p_reg_date,
        p.mod_date AS p_mod_date,
        p.content AS p_content,
        p.view_count AS p_view_count,
        p.like_count AS p_like_count,
        p.dislike_count AS p_dislike_count,
        p.pinned AS p_pinned
    </sql>

    <!-- Post 테이블의 컬럼 매핑, content 제외 -->
    <sql id="selectPostTableColumnWithoutContent">
        p.post_idx AS p_post_idx,
        p.post_group AS p_post_group,
        p.category AS p_category,
        p.title AS p_title,
        p.member_idx AS p_member_idx,
        p.manager_idx AS p_manager_idx,
        p.reg_date AS p_reg_date,
        p.mod_date AS p_mod_date,
        p.view_count AS p_view_count,
        p.like_count AS p_like_count,
        p.dislike_count AS p_dislike_count,
        p.pinned AS p_pinned
    </sql>



    <!-- Attachment 테이블의 컬럼 매핑 -->
    <sql id="selectAttachmentTableColumn">
        f.attachment_idx AS f_attachment_idx,
        f.original_attachment_name AS f_original_attachment_name,
        f.saved_attachment_name AS f_saved_attachment_name,
        f.attachment_extension AS f_attachment_extension,
        f.attachment_size AS f_attachment_size,
        f.post_idx AS f_post_idx
    </sql>

    <sql id="selectMaxAttachmentTableColumn">
        MAX(f.attachment_idx) AS f_attachment_idx,
        MAX(f.original_attachment_name) AS f_original_attachment_name,
        MAX(f.saved_attachment_name) AS f_saved_attachment_name,
        MAX(f.attachment_extension) AS f_attachment_extension,
        MAX(f.attachment_size) AS f_attachment_size,
        MAX(f.post_idx) AS f_post_idx
    </sql>






    <!-- Comment 테이블의 컬럼 매핑 -->
    <sql id="selectCommentTableColumn">
        co.comment_idx AS co_comment_idx,
        co.member_idx AS co_member_idx,
        co.manager_idx AS co_manager_idx,
        co.reg_date AS co_reg_date,
        co.content AS co_content,
        co.post_idx AS co_post_idx
    </sql>


    <sql id="selectMaxCommentTableColumn">
        MAX(co.comment_idx) AS co_comment_idx,
        MAX(co.member_idx) AS co_member_idx,
        MAX(co.manager_idx) AS co_manager_idx,
        MAX(co.reg_date) AS co_reg_date,
        MAX(co.content) AS co_content,
        MAX(co.post_idx) AS co_post_idx
    </sql>

    <sql id="selectMaxMemberAndManagerInfoOfCommentTableColumn">
        MAX(com.id) AS com_id,
        MAX(coma.id) AS coma_id,
        MAX(com.nickname) AS com_nickname,
        MAX(coma.nickname) AS coma_nickname
    </sql>

    <sql id="selectMemberAndManagerInfoOfCommentTableColumn">
        com.id AS com_id,
        coma.id AS coma_id,
        com.nickname AS com_nickname,
        coma.nickname AS coma_nickname
    </sql>






    <!-- Inquiry 테이블의 컬럼 매핑, 비밀글 여부만-->
    <sql id="selectInquiriesWithNonSecretInfo">
        i.secret AS i_secret,
        i.answer_manager_idx AS i_answer_manager_idx
    </sql>

    <sql id="selectMaxInquiriesWithNonSecretInfo">
        MAX(i.secret) AS i_secret,
        MAX(i.answer_manager_idx) AS i_answer_manager_idx
    </sql>

    <!-- Inquiry 테이블의 컬럼 매핑 -->
    <sql id="selectInquiryTableColumn">
        i.secret AS i_secret,
        i.answer_content AS i_answer_content,
        i.answer_reg_date AS i_answer_reg_date,
        i.answer_manager_idx AS i_answer_manager_idx,
        i.password AS i_password
    </sql>



    <sql id="selectMaxManagerInfoOfInquiryTableColumn">
        MAX(ima.nickname) AS ima_nickname
    </sql>

    <sql id="selectManagerInfoOfInquiryTableColumn">
        ima.nickname AS ima_nickname
    </sql>




    <!-- Manager 테이블의 컬럼 매핑 -->
    <sql id="selectManagerTableColumn">
        ma.nickname AS ma_nickname
    </sql>

    <!-- Manager 테이블의 컬럼 매핑 -->
    <sql id="selectMaxManagerTableColumn">
        max(ma.nickname) AS ma_nickname
    </sql>


    <!-- Member 테이블의 컬럼 매핑 -->
    <sql id="selectMemberTableColumn">
        m.nickname AS m_nickname,
        m.id AS m_id
    </sql>


    <!-- thumbnail 테이블의 컬럼 매핑 -->
    <sql id="selectThumbnailTableColumn">
        th.attachment_idx AS th_thumbnail_attachment_idx
    </sql>

    <sql id="selectMaxThumbnailTableColumn">
        MAX(th.attachment_idx) AS th_thumbnail_attachment_idx
    </sql>


    <!-- Attachment 컬렉션 매핑 -->
    <resultMap id="attachmentTableCollectionMapping" type="AttachmentResponse">
        <id property="attachmentIdx" column="f_attachment_idx"/>
        <result property="originalAttachmentName" column="f_original_attachment_name"/>
        <result property="savedAttachmentName" column="f_saved_attachment_name"/>
        <result property="attachmentExtension" column="f_attachment_extension"/>
        <result property="attachmentSize" column="f_attachment_size"/>
        <result property="postIdx" column="f_post_idx"/>
    </resultMap>

    <!-- Comment 컬렉션 매핑 -->
    <resultMap id="commentTableCollectionMapping" type="Comment">
        <id property="commentIdx" column="co_comment_idx"/>
        <result property="memberId" column="com_id"/>
        <result property="memberNickname" column="com_nickname"/>
        <result property="managerId" column="coma_id"/>
        <result property="managerNickname" column="coma_nickname"/>
        <result property="regDate" column="co_reg_date"/>
        <result property="content" column="co_content"/>
        <result property="postIdx" column="co_post_idx"/>
    </resultMap>

    <!-- 공지사항 결과 매핑 -->
    <resultMap id="notice" type="Notice" >
        <id property="postIdx" column="p_post_idx"/>
        <result property="category" column="p_category" javaType="com.now.core.category.domain.constants.Category"/>
        <result property="title" column="p_title"/>
        <result property="managerNickname" column="ma_nickname"/>
        <result property="regDate" column="p_reg_date"/>
        <result property="modDate" column="p_mod_date"/>
        <result property="content" column="p_content"/>
        <result property="viewCount" column="p_view_count"/>
        <result property="likeCount" column="p_like_count"/>
        <result property="dislikeCount" column="p_dislike_count"/>
        <result property="pinned" column="p_pinned"/>
        <!-- 공통 컬렉션 매핑 -->
        <collection property="comments" resultMap="commentTableCollectionMapping" />
    </resultMap>

    <!-- 커뮤니티 게시글 결과 매핑 -->
    <resultMap id="community" type="Community">
        <id property="postIdx" column="p_post_idx"/>
        <result property="category" column="p_category" javaType="com.now.core.category.domain.constants.Category"/>
        <result property="title" column="p_title"/>
        <result property="memberId" column="m_id"/>
        <result property="memberNickname" column="m_nickname"/>
        <result property="managerNickname" column="ma_nickname"/>
        <result property="regDate" column="p_reg_date"/>
        <result property="modDate" column="p_mod_date"/>
        <result property="content" column="p_content"/>
        <result property="viewCount" column="p_view_count"/>
        <result property="likeCount" column="p_like_count"/>
        <result property="dislikeCount" column="p_dislike_count"/>
        <!-- 공통 컬렉션 매핑 -->
        <collection property="attachments" resultMap="attachmentTableCollectionMapping" />
        <collection property="comments" resultMap="commentTableCollectionMapping" />
    </resultMap>

    <!-- 사진 게시글 결과 매핑 -->
    <resultMap id="photo" type="Photo">
        <id property="postIdx" column="p_post_idx"/>
        <result property="category" column="p_category" javaType="com.now.core.category.domain.constants.Category"/>
        <result property="title" column="p_title"/>
        <result property="memberId" column="m_id"/>
        <result property="memberNickname" column="m_nickname"/>
        <result property="managerNickname" column="ma_nickname"/>
        <result property="regDate" column="p_reg_date"/>
        <result property="modDate" column="p_mod_date"/>
        <result property="content" column="p_content"/>
        <result property="viewCount" column="p_view_count"/>
        <result property="likeCount" column="p_like_count"/>
        <result property="dislikeCount" column="p_dislike_count"/>
        <result property="thumbnailAttachmentIdx" column="th_thumbnail_attachment_idx"/>
        <!-- 공통 컬렉션 매핑 -->
        <collection property="attachments" resultMap="attachmentTableCollectionMapping" />
        <collection property="comments" resultMap="commentTableCollectionMapping" />
    </resultMap>

    <!-- 문의 게시글 결과 매핑 -->
    <resultMap id="inquiry" type="Inquiry">
        <id property="postIdx" column="p_post_idx"/>
        <result property="category" column="p_category" javaType="com.now.core.category.domain.constants.Category"/>
        <result property="title" column="p_title"/>
        <result property="memberNickname" column="m_nickname"/>
        <result property="managerNickname" column="ma_nickname"/>
        <result property="memberId" column="m_id"/>
        <result property="regDate" column="p_reg_date"/>
        <result property="modDate" column="p_mod_date"/>
        <result property="content" column="p_content"/>
        <result property="viewCount" column="p_view_count"/>
        <result property="likeCount" column="p_like_count"/>
        <result property="dislikeCount" column="p_dislike_count"/>
        <result property="secret" column="i_secret"/>
        <result property="answerManagerNickname" column="ima_nickname"/>
        <result property="answerContent" column="i_answer_content"/>
        <result property="answerRegDate" column="i_answer_reg_date"/>
        <result property="password" column="i_password"/>
        <!-- 공통 컬렉션 매핑 -->
        <collection property="comments" resultMap="commentTableCollectionMapping" />
    </resultMap>

    <sql id="maxNumberOfPosts">
        <if test="maxNumberOfPosts != null">
            LIMIT 0, #{maxNumberOfPosts}
        </if>
    </sql>

    <sql id="postGroupWithWhere">
        <if test="postGroup != null">
            WHERE p.post_group = #{postGroup.name}
        </if>
    </sql>


    <!-- 검색 조건에 따른 WHERE 절 SQL -->
    <sql id="conditionWithoutPostGroup">

        <if test="startDate != null">
            AND DATE(p.reg_date) >= DATE(DATE_FORMAT(#{startDate}, '%Y-%m-%d'))
        </if>

        <if test="endDate != null">
            AND DATE(DATE_FORMAT(#{endDate}, '%Y-%m-%d')) >= DATE(p.reg_date)
        </if>

        <if test="category != null">
            AND p.category = #{category.name}
        </if>

        <if test="keyword != null">
            AND
                (p.title LIKE CONCAT('%', #{keyword}, '%')
                OR m.nickname LIKE CONCAT('%', #{keyword}, '%')
                OR ma.nickname LIKE CONCAT('%', #{keyword}, '%')
                OR p.content LIKE
            CONCAT('%', #{keyword}, '%'))
        </if>

    </sql>

    <sql id="sort">
        <choose>
            <when test="sort.name == 'LATEST'">
                ORDER BY p.post_idx DESC
            </when>
            <when test="sort.name == 'RECOMMENDED'">
                ORDER BY p.like_count DESC
            </when>
            <when test="sort.name == 'MOST_VIEWED'">
                ORDER BY p.view_count DESC
            </when>
            <otherwise>
                ORDER BY p.post_idx DESC
            </otherwise>
        </choose>
    </sql>

    <sql id="page">
        LIMIT #{page.recordStartIndex}, #{page.recordsPerPage}
    </sql>


</mapper>
