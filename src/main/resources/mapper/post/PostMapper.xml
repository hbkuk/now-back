<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.now.core.post.common.domain.mapper.PostMapper">


    <!-- 모든 게시글 조회 쿼리 -->
    <select id="findAllPosts" parameterType="Condition" resultMap="posts">
        SELECT * FROM (
        SELECT
        <include refid="CommonColumnMappings.postTableColumnWithoutContent"/>,
        <include refid="CommonColumnMappings.maxAttachmentTableColumn"/>,
        <include refid="CommonColumnMappings.maxMemberTableColumn"/>,
        <include refid="CommonColumnMappings.maxInquiriesWithNonSecretInfo"/>,
        <include refid="CommonColumnMappings.maxCommentTableColumn"/>,
        <include refid="CommonColumnMappings.maxManagerTableColumn"/>,
        <include refid="CommonColumnMappings.maxThumbnailTableColumn"/>,
        <include refid="CommonColumnMappings.maxMemberAndManagerInfoOfCommentTableColumn"/>,
        <include refid="CommonColumnMappings.maxManagerInfoOfInquiryTableColumn"/>
        FROM tb_post p
        LEFT OUTER JOIN tb_attachment f ON p.post_idx = f.post_idx
        LEFT OUTER JOIN tb_comment co ON p.post_idx = co.post_idx
        LEFT OUTER JOIN tb_member m ON p.member_idx = m.member_idx
        LEFT OUTER JOIN tb_manager ma ON p.manager_idx = ma.manager_idx
        LEFT OUTER JOIN tb_thumbnail th ON p.post_idx = th.post_idx
        LEFT OUTER JOIN tb_member com ON co.member_idx = com.member_idx
        LEFT OUTER JOIN tb_manager coma ON co.manager_idx = coma.manager_idx
        LEFT OUTER JOIN tb_inquiry i ON i.post_idx = p.post_idx
        LEFT OUTER JOIN tb_manager ima ON p.manager_idx = ima.manager_idx
        WHERE p.post_group = 'NOTICE' AND p.pinned = false
        GROUP BY p.post_idx
        <include refid="DynamicQueryMapper.sort"/>

        <include refid="DynamicQueryMapper.maxNumberOfPosts"/>

        ) AS notice_posts

        UNION

        SELECT * FROM (
        SELECT
        <include refid="CommonColumnMappings.postTableColumnWithoutContent"/>,
        <include refid="CommonColumnMappings.maxAttachmentTableColumn"/>,
        <include refid="CommonColumnMappings.maxMemberTableColumn"/>,
        <include refid="CommonColumnMappings.maxInquiriesWithNonSecretInfo"/>,
        <include refid="CommonColumnMappings.maxCommentTableColumn"/>,
        <include refid="CommonColumnMappings.maxManagerTableColumn"/>,
        <include refid="CommonColumnMappings.maxThumbnailTableColumn"/>,
        <include refid="CommonColumnMappings.maxMemberAndManagerInfoOfCommentTableColumn"/>,
        <include refid="CommonColumnMappings.maxManagerInfoOfInquiryTableColumn"/>
        FROM tb_post p
        LEFT OUTER JOIN tb_attachment f ON p.post_idx = f.post_idx
        LEFT OUTER JOIN tb_comment co ON p.post_idx = co.post_idx
        LEFT OUTER JOIN tb_member m ON p.member_idx = m.member_idx
        LEFT OUTER JOIN tb_manager ma ON p.manager_idx = ma.manager_idx
        LEFT OUTER JOIN tb_thumbnail th ON p.post_idx = th.post_idx
        LEFT OUTER JOIN tb_member com ON co.member_idx = com.member_idx
        LEFT OUTER JOIN tb_manager coma ON co.manager_idx = coma.manager_idx
        LEFT OUTER JOIN tb_inquiry i ON i.post_idx = p.post_idx
        LEFT OUTER JOIN tb_manager ima ON ima.manager_idx = i.answer_manager_idx
        WHERE p.post_group = 'COMMUNITY'
        GROUP BY p.post_idx
        <include refid="DynamicQueryMapper.sort"/>

        <include refid="DynamicQueryMapper.maxNumberOfPosts"/>

        ) AS community_posts

        UNION

        SELECT * FROM (
        SELECT
        <include refid="CommonColumnMappings.postTableColumnWithoutContent"/>,
        <include refid="CommonColumnMappings.maxAttachmentTableColumn"/>,
        <include refid="CommonColumnMappings.maxMemberTableColumn"/>,
        <include refid="CommonColumnMappings.maxInquiriesWithNonSecretInfo"/>,
        <include refid="CommonColumnMappings.maxCommentTableColumn"/>,
        <include refid="CommonColumnMappings.maxManagerTableColumn"/>,
        <include refid="CommonColumnMappings.maxThumbnailTableColumn"/>,
        <include refid="CommonColumnMappings.maxMemberAndManagerInfoOfCommentTableColumn"/>,
        <include refid="CommonColumnMappings.maxManagerInfoOfInquiryTableColumn"/>
        FROM tb_post p
        LEFT OUTER JOIN tb_attachment f ON p.post_idx = f.post_idx
        LEFT OUTER JOIN tb_comment co ON p.post_idx = co.post_idx
        LEFT OUTER JOIN tb_member m ON p.member_idx = m.member_idx
        LEFT OUTER JOIN tb_manager ma ON p.manager_idx = ma.manager_idx
        LEFT OUTER JOIN tb_thumbnail th ON p.post_idx = th.post_idx
        LEFT OUTER JOIN tb_member com ON co.member_idx = com.member_idx
        LEFT OUTER JOIN tb_manager coma ON co.manager_idx = coma.manager_idx
        LEFT OUTER JOIN tb_inquiry i ON i.post_idx = p.post_idx
        LEFT OUTER JOIN tb_manager ima ON ima.manager_idx = i.answer_manager_idx
        WHERE p.post_group = 'PHOTO'
        GROUP BY p.post_idx
        <include refid="DynamicQueryMapper.sort"/>

        <include refid="DynamicQueryMapper.maxNumberOfPosts"/>

        ) AS photo_posts

        UNION

        SELECT * FROM (
        SELECT
        <include refid="CommonColumnMappings.postTableColumnWithoutContent"/>,
        <include refid="CommonColumnMappings.maxAttachmentTableColumn"/>,
        <include refid="CommonColumnMappings.maxMemberTableColumn"/>,
        <include refid="CommonColumnMappings.maxInquiriesWithNonSecretInfo"/>,
        <include refid="CommonColumnMappings.maxCommentTableColumn"/>,
        <include refid="CommonColumnMappings.maxManagerTableColumn"/>,
        <include refid="CommonColumnMappings.maxThumbnailTableColumn"/>,
        <include refid="CommonColumnMappings.maxMemberAndManagerInfoOfCommentTableColumn"/>,
        <include refid="CommonColumnMappings.maxManagerInfoOfInquiryTableColumn"/>
        FROM tb_post p
        LEFT OUTER JOIN tb_attachment f ON p.post_idx = f.post_idx
        LEFT OUTER JOIN tb_comment co ON p.post_idx = co.post_idx
        LEFT OUTER JOIN tb_member m ON p.member_idx = m.member_idx
        LEFT OUTER JOIN tb_manager ma ON p.manager_idx = ma.manager_idx
        LEFT OUTER JOIN tb_thumbnail th ON p.post_idx = th.post_idx
        LEFT OUTER JOIN tb_member com ON co.member_idx = com.member_idx
        LEFT OUTER JOIN tb_manager coma ON co.manager_idx = coma.manager_idx
        LEFT OUTER JOIN tb_inquiry i ON i.post_idx = p.post_idx
        LEFT OUTER JOIN tb_manager ima ON ima.manager_idx = i.answer_manager_idx
        WHERE p.post_group = 'INQUIRY'
        GROUP BY p.post_idx
        <include refid="DynamicQueryMapper.sort"/>

        <include refid="DynamicQueryMapper.maxNumberOfPosts"/>

        ) AS inquiry_posts
    </select>


    <!-- 모든 게시글의 개수 확인 -->
    <select id="findTotalPostCount" parameterType="Condition">
        SELECT
            count(p.post_idx)
        FROM tb_post p
            LEFT OUTER JOIN tb_comment co ON p.post_idx = co.post_idx
            LEFT OUTER JOIN tb_member m ON p.member_idx = m.member_idx
            LEFT OUTER JOIN tb_manager ma ON p.manager_idx = ma.manager_idx
            LEFT OUTER JOIN tb_member com ON co.member_idx = com.member_idx
        <include refid="DynamicQueryMapper.postGroupWithWhere"/>
        <include refid="DynamicQueryMapper.conditionWithoutPostGroup"/>
    </select>


    <!-- 게시글의 조회수 증가 쿼리 -->
    <update id="incrementViewCount" parameterType="Long">
        UPDATE tb_post
            SET view_count = view_count + 1
        WHERE post_Idx = #{postIdx}
    </update>


    <!-- 게시글의 좋아요 증가 쿼리 -->
    <update id="incrementLikeCount" parameterType="Long">
        UPDATE tb_post
            SET like_count = like_count + 1
        WHERE post_Idx = #{postIdx}
    </update>


    <!-- 게시글의 좋아요 감소 쿼리 -->
    <update id="decrementLikeCount" parameterType="Long">
        UPDATE tb_post
            SET like_count = like_count - 1
        WHERE post_Idx = #{postIdx}
    </update>


    <!-- 게시글의 싫어요 증가 쿼리 -->
    <update id="incrementDislikeCount" parameterType="Long">
        UPDATE tb_post
            SET dislike_count = dislike_count + 1
        WHERE post_Idx = #{postIdx}
    </update>


    <!-- 게시글의 싫어요 감소 쿼리 -->
    <update id="decrementDislikeCount" parameterType="Long">
        UPDATE tb_post
            SET dislike_count = dislike_count - 1
        WHERE post_Idx = #{postIdx}
    </update>

    <!-- 게시글의 리액션 수정 쿼리 -->
    <insert id="savePostReaction" parameterType="PostReaction">
        INSERT INTO tb_post_reaction (post_idx, member_idx, manager_idx, reaction)
        VALUES (#{postIdx}, #{memberIdx}, #{managerIdx}, #{reaction.name})
    </insert>



    <!-- 게시글의 리액션 수정 쿼리 -->
    <update id="updatePostReaction" parameterType="PostReaction">
        UPDATE tb_post_reaction
            SET reaction = #{reaction.name}
        WHERE post_Idx = #{postIdx}
    </update>


    <!-- 기존 리액션만 확인 쿼리 -->
    <select id="getPostReaction" parameterType="PostReaction" resultMap="postReaction">
        SELECT
        <include refid="CommonColumnMappings.postReactionTableColumn"/>
        FROM tb_post_reaction prea
        LEFT OUTER JOIN tb_member pream ON prea.member_idx = pream.member_idx
        LEFT OUTER JOIN tb_manager preama ON prea.manager_idx = preama.manager_idx
        WHERE prea.post_idx = #{postIdx}
        <if test="memberIdx != null">
            AND prea.member_idx = ${memberIdx}
        </if>
        <if test="managerIdx != null">
            AND prea.manager_idx = ${managerIdx}
        </if>
    </select>


    <!-- 기존 리액션과 좋아요, 싫어요 확인 쿼리 -->
    <select id="getPostReactionDetails" parameterType="PostReaction" resultMap="postReaction">
        SELECT
            <include refid="CommonColumnMappings.reactionInfoOfPostTableColumn"/>,
            <include refid="CommonColumnMappings.postReactionTableColumn"/>
            FROM tb_post_reaction prea
            LEFT OUTER JOIN tb_post preap ON prea.post_idx = preap.post_idx
            LEFT OUTER JOIN tb_member pream ON prea.member_idx = pream.member_idx
            LEFT OUTER JOIN tb_manager preama ON prea.manager_idx = preama.manager_idx
        WHERE prea.post_idx = #{postIdx}
            <if test="memberIdx != null">
                AND prea.member_idx = ${memberIdx}
            </if>
            <if test="managerIdx != null">
                AND prea.manager_idx = ${managerIdx}
            </if>
    </select>


    <!-- 게시글의 존재 여부 확인 쿼리 -->
    <select id="existPostByPostId" parameterType="Long" resultType="boolean">
        SELECT COUNT(*) > 0
            FROM tb_post
        WHERE post_idx = #{postIdx}
    </select>


    <!-- Posts resultMap -->
    <resultMap id="posts" type="Posts">
        <discriminator javaType="string" column="p_post_group">
            <case value="NOTICE">
                <association property="notice" resultMap="com.now.core.post.notice.domain.mapper.NoticeMapper.notice"/>
            </case>
            <case value="COMMUNITY">
                <association property="community" resultMap="com.now.core.post.community.domain.mapper.CommunityMapper.community"/>
            </case>
            <case value="PHOTO">
                <association property="photo" resultMap="com.now.core.post.photo.domain.mapper.PhotoMapper.photo"/>
            </case>
            <case value="INQUIRY">
                <association property="inquiry" resultMap="com.now.core.post.inquiry.domain.mapper.InquiryMapper.inquiry"/>
            </case>
        </discriminator>
    </resultMap>


    <!-- 게시글의 리액션 결과 매핑 -->
    <resultMap id="postReaction" type="PostReactionResponse">
        <id property="likeCount" column="preap_like_count"/>
        <id property="dislikeCount" column="preap_dislike_count"/>
        <result property="reaction" column="prea_reaction" javaType="com.now.core.post.common.presentation.dto.constants.Reaction"/>
    </resultMap>

</mapper>
