plugins {
    id 'java'
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    // Asciidoctor 플러그인 적용
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.now'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    asciidoctorExtensions // dependencies 에서 적용
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.8.2'
}

sourceCompatibility = "11"
targetCompatibility = "11"

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.3.1'
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:1.3.2'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'com.mikemybytes:junit5-formatted-source:0.2.0'
    implementation 'com.mikemybytes:junit5-formatted-source-parent:0.2.0'
    implementation 'com.mikemybytes:junit5-formatted-source-tests:0.2.0'

    implementation 'mysql:mysql-connector-java:8.0.28'

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.28'

    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    testImplementation("org.assertj:assertj-core:3.22.0")
    testImplementation('org.mockito:mockito-inline:3.4.0')
    implementation 'org.springframework:spring-jdbc:5.3.10'

    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'org.springframework.security:spring-security-crypto:5.7.1'

    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'

    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    implementation 'com.slack.api:slack-api-client:1.29.0'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    implementation 'com.google.code.findbugs:jsr305:3.0.2'
}

ext {
    snippetsDir = file('build/generated-snippets') // 아래서 사용할 변수 선언
}

test {
    useJUnitPlatform()
    outputs.dir snippetsDir // snippetsDir 디렉토리를 test의 output으로 구성하는 설정 -> 스니펫 조각들이 build/generated-snippets로 출력
}

asciidoctor { // asciidoctor 작업 구성
    dependsOn test // test 작업 이후에 작동하도록 하는 설정
    configurations 'asciidoctorExtensions' // 위에서 작성한 configuration 적용
    inputs.dir snippetsDir // snippetsDir 를 입력으로 구성

    // source가 없으면 .adoc파일을 전부 html로 만들어버림
    // source 지정시 특정 adoc만 HTML로 만든다.
    sources{
        include("**/*.adoc","**/common/*.adoc")
    }

    // 특정 .adoc에 다른 adoc 파일을 가져와서(include) 사용하고 싶을 경우 경로를 baseDir로 맞춰주는 설정입니다.
    // 개별 adoc으로 운영한다면 필요 없는 옵션입니다.
    baseDirFollowsSourceFile()
}

// static/docs 폴더 비우기
asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

// asccidoctor 작업 이후 생성된 HTML 파일을 static/docs 로 copy
task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

    // build 의 의존작업 명시
    build {
        dependsOn copyDocument
    }


    sourceSets {
    main {
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}
